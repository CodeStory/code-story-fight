http = require('http')
fs = require('fs')

outputfile = 'schedule-devoxx.json'


class Talk
  constructor: (@speakers, @title, @fromTime, @toTime, @kind, @room) ->

talks = []

slot_monday_tuesday = ["9:30","13:30","16:45","17:25","18:05","19:00","20:00","21:00"]
slot_wednesday = ["9:30","10:55","12:00","13:10","13:35","14:00","15:10","16:40","17:50","19:00","20:00","21:00"]

days = [
  {
  day: "Monday"
  date: "2012-11-12"
  talks: []
  },
  {
  day: "Tuesday"
  date: "2012-11-13"
  talks: []
  },
  {
  day: "Wednesday"
  date: "2012-11-14"
  talks: []
  },
  {
  day: "Thursday"
  date: "2012-11-15"
  talks: []
  },
  {
  day: "Friday"
  date: "2012-11-16"
  talks: []
  }
]

indexByDays = [
  "2012-11-12",
  "2012-11-13",
  "2012-11-14",
  "2012-11-15",
  "2012-11-16"
]

class ScheduleRetriever
  constructor: (@eventId) ->
    @scheduleUri = "http://cfp.devoxx.com/rest/v1/events/#{@eventId}/schedule"
  retrieve: ->
    console.log "getting schedule"
    http.get @scheduleUri, (response) ->
      scheduleData = ""
      response.on 'data', (data) ->
        if (data)
          scheduleData += data
      response.on 'end', ->
        console.log "got schedule"
        jsonData = JSON.parse scheduleData
        console.log "parsed data"
        talksWithPresentationUri = []
        for jsonTalk in jsonData
          if jsonTalk.speakers?
            console.log "Talk #{jsonTalk.title}"
            Talk talk = new Talk jsonTalk.speakers, jsonTalk.title, jsonTalk.fromTime, jsonTalk.toTime, jsonTalk.kind, jsonTalk.room
            if jsonTalk.presentationUri?
              talk.presentationUri = jsonTalk.presentationUri
              talksWithPresentationUri.push talk
            else
              talks.push talk
        @retrievePresentationDetail(talksWithPresentationUri)
    retrievePresentationDetail: (talksWithPresentationUri) ->
      if talksToRemain.length == 0
        talks.map (currentTalk) ->
          index = currentTalk.fromTime[0..9]
          days[indexByDays.indexOf(index)].talks.push currentTalk
        fs.writeFileSync(outputfile, JSON.stringify days, 'utf8')
        console.log "written #{outputfile}"
        return
      currentTalk = talksToRemain[0]
      console.log ">" + currentTalk.presentationUri
      http.get currentTalk.presentationUri, (response) ->
        if response.statusCode == 200
          presentationData = ""
          response.on 'data', (data) ->
            presentationData += data
          response.on 'end', () ->
            presentationJsonData = JSON.parse presentationData
            currentTalk.presentation = presentationJsonData.summary
            currentTalk.tags = presentationJsonData.tags
            currentTalk.presentationUri = ""
            talks.push currentTalk unless currentTalk == null
        else
          console.log("/!\\ got a #{response.statusCode} for #{currentTalk.presentationUri}")
        @retrievePresentationDetail(talksToRemain[1..talksToRemain.size - 2])

new ScheduleRetriever(7).retrieve()
